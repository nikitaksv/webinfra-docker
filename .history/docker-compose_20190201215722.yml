version: '3.4'

### NETWORKS #######################
networks: 
  default:

### VOLUMES ########################
volumes:
  mysql_data:
  ldap_data:
  ldap_config:
  ldap_data_backup:
  bind_data:
  gitlab_data:
  gitlab_config:
  mail_state:
  cloud_data:
  letsencrypt_certs:
  letsencrypt_vhost.d:
  letsencrypt_html:
  
### SERVICES ########################
services:

### NGINX ###########################
  nginx:
    container_name: ${COMPOSE_PROJECT_NAME}_${NGINX_CONTAINER_NAME}
    build:
      context: ./services/nginx
      args: 
        - NGINX_TAG_VERSION=${NGINX_TAG_VERSION}
    volumes: 
      - ${NGINX_CONFIG_PATH}:/etc/nginx/conf.d/
      - cloud_data:/var/www/html:ro
    environment: 
      - VIRTUAL_HOST=${NEXTCLOUD_CONTAINER_NAME}.${DOMAIN}
      - LETSENCRYPT_HOST=${NEXTCLOUD_CONTAINER_NAME}.${DOMAIN}
      - LETSENCRYPT_EMAIL=admin@${DOMAIN}
      - TZ=${TZ}
    networks: 
      default:   
    restart: always

### LDAP ###########################
  ldap:
    container_name: ${COMPOSE_PROJECT_NAME}_${LDAP_CONTAINER_NAME}
    hostname: ${LDAP_HOSTNAME}.${DOMAIN}
    build:
      context: ./services/ldap
      args: 
        - LDAP_TAG_VERSION=${LDAP_TAG_VERSION}
    volumes: 
      - ldap_data:/var/lib/ldap
      - ldap_config:/etc/ldap/slapd.d
      - ldap_data_backup:/data/backup
    environment: 
      - LDAP_DOMAIN=${DOMAIN}
      - LDAP_ORGANISATION=${LDAP_ORGANISATION}
      - LDAP_ADMIN_PASSWORD=${LDAP_ADMIN_PASSWORD}
      - LDAP_CONFIG_PASSWORD=${LDAP_ADMIN_PASSWORD}
      - LDAP_BACKUP_CONFIG_CRON_EXP=${LDAP_BACKUP_CONFIG_CRON_EXP}
      - LDAP_BACKUP_DATA_CRON_EXP=${LDAP_BACKUP_DATA_CRON_EXP}
      - LDAP_BACKUP_TTL=${LDAP_BACKUP_TTL}
      - LDAP_REMOVE_CONFIG_AFTER_SETUP=${LDAP_REMOVE_CONFIG_AFTER_SETUP}
    networks: 
      default:
        aliases: 
          - ${LDAP_HOSTNAME}.${DOMAIN}
    restart: always

### LDAP-CLIENT ####################
  ldap-client:
    container_name: ${COMPOSE_PROJECT_NAME}_${LDAP_CLIENT_CONTAINER_NAME}
    hostname: ${LDAP_CLIENT_HOSTNAME}.${DOMAIN}
    build:
      context: ./services/ldap-client
      args: 
        - LDAP_CLIENT_TAG_VERSION=${LDAP_CLIENT_TAG_VERSION}
    volumes: 
      - letsencrypt_certs:/container/service/phpldapadmin/assets/apache2/certs
    environment:
      - PHPLDAPADMIN_LDAP_HOSTS=${LDAP_HOSTNAME}.${DOMAIN}
      - PHPLDAPADMIN_SERVER_ADMIN=admin@${DOMAIN}
      - PHPLDAPADMIN_HTTPS_CRT_FILENAME=${LDAP_HOSTNAME}.${DOMAIN}.crt
      - PHPLDAPADMIN_HTTPS_KEY_FILENAME=${LDAP_HOSTNAME}.${DOMAIN}.key
      - PHPLDAPADMIN_HTTPS_CA_CRT_FILENAME=${LDAP_HOSTNAME}.${DOMAIN}-ca.crt
      - PHPLDAPADMIN_TRUST_PROXY_SSL=true
      - VIRTUAL_HOST=${LDAP_CLIENT_HOSTNAME}.${DOMAIN}
      - VIRTUAL_PROTO=https
      - HTTPS_METHOD=redirect
      - VIRTUAL_PORT=443
      - LETSENCRYPT_HOST=${LDAP_CLIENT_HOSTNAME}.${DOMAIN}
      - LETSENCRYPT_EMAIL=admin@${DOMAIN}
    depends_on:
      - ldap
    restart: always
    networks: 
      default:
        aliases: 
          - ${LDAP_CLIENT_HOSTNAME}.${DOMAIN}

### BIND ###########################
  bind:
    container_name: ${COMPOSE_PROJECT_NAME}_${BIND_CONTAINER_NAME}
    build:
      context: ./services/bind
      args: 
        - BIND_TAG_VERSION=${BIND_TAG_VERSION}
        - ADDRESS=${BIND_HOSTNAME}.${DOMAIN}
    environment: 
      - VIRTUAL_HOST=${BIND_HOSTNAME}.${DOMAIN}
      - VIRTUAL_PORT=${BIND_WEBMIN_EXPOSE}
      - LETSENCRYPT_HOST=${BIND_HOSTNAME}.${DOMAIN}
      - LETSENCRYPT_EMAIL=admin@${DOMAIN}
      - ROOT_PASSWORD=${ROOT_PASSWORD}
    ports: 
      - 15${BIND_EXPOSE}:${BIND_EXPOSE}/tcp
      - 15${BIND_EXPOSE}:${BIND_EXPOSE}/udp
    expose:
      - ${BIND_WEBMIN_EXPOSE}
    restart: always
    volumes:
      - bind_data:/data 
    networks: 
      default:
        aliases: 
          - ${BIND_HOSTNAME}.${DOMAIN}

### REDMINE ########################
  redmine:
    container_name: ${COMPOSE_PROJECT_NAME}_${REDMINE_CONTAINER_NAME}
    hostname: ${REDMINE_HOSTNAME}.${DOMAIN}
    build:
      context: ./services/redmine
      args: 
        - REDMINE_TAG_VERSION=${REDMINE_TAG_VERSION}
    volumes: 
      - ${REDMINE_DATA_PATH}:/usr/src/redmine/files
      - ${REDMINE_PLUGINS_PATH}:/usr/src/redmine/plugins
      - ${REDMINE_THEMES_PATH}:/usr/src/redmine/public/themes
      - ${REDMINE_CONFIGURATION_FILE_PATH}:/usr/src/redmine/config/configuration.yml
    environment: 
      - REDMINE_DB_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - REDMINE_DB_DATABASE=${MYSQL_DATABASE}
      - REDMINE_DB_MYSQL=${MYSQL_HOSTNAME}.${DOMAIN}
      - VIRTUAL_HOST=${REDMINE_HOSTNAME}.${DOMAIN}
      - VIRTUAL_PORT=3000
      - LETSENCRYPT_HOST=${REDMINE_HOSTNAME}.${DOMAIN}
      - LETSENCRYPT_EMAIL=admin@${DOMAIN}
      # - REDMINE_PLUGINS_MIGRATE=true
      - RAILS_ENV=production
    command:
      - /bin/sh
      - -ec
      - |
         /docker-entrypoint.sh rake db:migrate
         /docker-entrypoint.sh rake tmp:cache:clear tmp:sessions:clear
         /docker-entrypoint.sh rake redmine:plugins NAME=redmine_agile
         /docker-entrypoint.sh rails server -b 0.0.0.0
    depends_on: 
      - mysql
    expose: 
      - 80
    networks: 
      default:
        aliases: 
          - ${REDMINE_HOSTNAME}.${DOMAIN}
    restart: always

### MYSQL ##########################
  mysql:
    command: []
    container_name: ${COMPOSE_PROJECT_NAME}_${MYSQL_CONTAINER_NAME}
    build:
      context: ./services/mysql
      args: 
        - MYSQL_TAG_VERSION=${MYSQL_TAG_VERSION}
    environment: 
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - TZ=${TZ}
    volumes: 
      - mysql_data:/var/lib/mysql
      - ${MYSQL_CONF_PATH}:/etc/mysql/conf.d
    networks: 
      default:
        aliases: 
          - ${MYSQL_HOSTNAME}.${DOMAIN}
    restart: always

### PHPMYADMIN ##########################
  phpmyadmin:
    container_name: ${COMPOSE_PROJECT_NAME}_${PHPMYADMIN_CONTAINER_NAME}
    build:
      context: ./services/phpmyadmin
      args: 
        - PHPMYADMIN_TAG_VERSION=${PHPMYADMIN_TAG_VERSION}
    environment: 
      - PMA_HOST=mysql
      - TZ=${TZ}
      - VIRTUAL_HOST=${PHPMYADMIN_HOSTNAME}.${DOMAIN}
      - LETSENCRYPT_HOST=${PHPMYADMIN_HOSTNAME}.${DOMAIN}
      - LETSENCRYPT_EMAIL=admin@${DOMAIN}
    networks: 
      default:
        aliases: 
          - ${PHPMYADMIN_HOSTNAME}.${DOMAIN}
    restart: always

### GITLAB #########################
  gitlab:
    container_name: ${COMPOSE_PROJECT_NAME}_${GITLAB_CONTAINER_NAME}
    build:
      context: ./services/gitlab
      args: 
        - GITLAB_TAG_VERSION=${GITLAB_TAG_VERSION}
    environment: 
      GITLAB_OMNIBUS_CONFIG: |
        external_url 'https://${GITLAB_HOSTNAME}.${DOMAIN}/'
        gitlab_rails['lfs_enabled'] = true
        gitlab_rails['smtp_enable'] = true
        gitlab_rails['smtp_address'] = 'mail'
        gitlab_rails['smtp_port'] = '25'
        gitlab_rails['smtp_domain'] = 'mail'
        gitlab_rails['smtp_authentication'] = 'plain'
        gitlab_rails['smtp_user_name'] = 'git@${DOMAIN}'
        gitlab_rails['smtp_password'] = 'defender'
        gitlab_rails['smtp_enable_starttls_auto'] = false
        gitlab_rails['gitlab_email_from'] = 'git@${DOMAIN}'
        gitlab_rails['smtp_tls'] = false
        gitlab_rails['smtp_openssl_verify_mode'] = 'peer'
        nginx['listen_port'] = 80
        nginx['listen_https'] = false
        registry_nginx['listen_port'] = 80
        registry_nginx['listen_https'] = false
        gitlab_rails['gitlab_shell_ssh_port'] = ${GITLAB_SSH_PORT};
        gitlab_rails['time_zone'] = "${TZ}"
      VIRTUAL_HOST: ${GITLAB_HOSTNAME}.${DOMAIN}
      LETSENCRYPT_HOST: ${GITLAB_HOSTNAME}.${DOMAIN}
      LETSENCRYPT_EMAIL: admin@${DOMAIN}
    volumes: 
      - gitlab_data:/var/opt/gitlab
      - gitlab_config:/etc/gitlab
      - ${GITLAB_LDAP_CONFIG_PATH}:/etc/gitlab/gitlab.rb
      - ${GITLAB_LOGS_PATH}:/var/log/gitlab
      - ${GITLAB_REPO_PATH}:/var/opt/gitlab/git-data/repositories
    ports:
      - ${GITLAB_SSH_PORT}:22
    networks: 
      default:
        aliases: 
          - ${GITLAB_HOSTNAME}.${DOMAIN}
    restart: always

### ROUNDCUBEMAIL ##################
  roundcube:
    container_name: ${COMPOSE_PROJECT_NAME}_${ROUNDCUBEMAIL_CONTAINER_NAME}
    build:
      context: ./services/roundcube
      args: 
        - ROUNDCUBEMAIL_TAG_VERSION=${ROUNDCUBEMAIL_TAG_VERSION}
    volumes: 
      - ${ROUNDCUBEMAIL_CONFIG_PATH}:/var/roundcube/config/
    environment: 
      - ROUNDCUBEMAIL_DEFAULT_HOST=${MAIL_HOSTNAME}.${DOMAIN}
      - ROUNDCUBEMAIL_SMTP_SERVER=${MAIL_HOSTNAME}.${DOMAIN}
      - ROUNDCUBEMAIL_SMTP_PORT=25
      - ROUNDCUBEMAIL_DB_TYPE=mysql
      - ROUNDCUBEMAIL_DB_HOST=${MYSQL_HOSTNAME}.${DOMAIN}
      - ROUNDCUBEMAIL_DB_USER=${MYSQL_USER}
      - ROUNDCUBEMAIL_DB_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - ROUNDCUBEMAIL_DB_NAME=${ROUNDCUBEMAIL_DB_NAME}
      - VIRTUAL_HOST=${ROUNDCUBEMAIL_HOSTNAME}.${DOMAIN}
      - LETSENCRYPT_HOST=${ROUNDCUBEMAIL_HOSTNAME}.${DOMAIN}
      - LETSENCRYPT_EMAIL=admin@${DOMAIN}
    networks: 
      default:
        aliases: 
          - ${ROUNDCUBEMAIL_HOSTNAME}.${DOMAIN}
    restart: always

### MAIL ###########################
  mail:
    hostname: ${MAIL_HOSTNAME}
    domainname: ${DOMAIN}
    container_name: ${COMPOSE_PROJECT_NAME}_${MAIL_CONTAINER_NAME}
    build:
      context: ./services/mail
      args: 
        - MAIL_TAG_VERSION=${MAIL_TAG_VERSION}
    ports:
      - "25:25"
      - "143:143"
      - "587:587"
      - "465:465"
      - "993:993"
    volumes:
      - ${MAIL_DATA_PATH}:/var/mail
      - mail_state:/var/mail-state
      - ./services/mail/config/:/tmp/docker-mailserver/
      - letsencrypt_certs:/etc/letsencrypt/live
      - /etc/localtime:/etc/localtime:ro
    environment:
      - ENABLE_SPAMASSASSIN=${ENABLE_SPAMASSASSIN}
      - ENABLE_CLAMAV=${ENABLE_CLAMAV}
      - ENABLE_FAIL2BAN=${ENABLE_FAIL2BAN}
      - ENABLE_POSTGREY=${ENABLE_POSTGREY}
      - ENABLE_SASLAUTHD=${ENABLE_SASLAUTHD}
      - ENABLE_LDAP=${ENABLE_LDAP}
      - SPOOF_PROTECTION=${SPOOF_PROTECTION}
      - ONE_DIR=${ONE_DIR}
      - DMS_DEBUG=${DMS_DEBUG}     
      - SA_SPAM_SUBJECT=${SA_SPAM_SUBJECT} 
      - LDAP_SERVER_HOST=${LDAP_HOSTNAME}.${DOMAIN}
      - LDAP_SEARCH_BASE=${LDAP_SEARCH_BASE}
      - LDAP_BIND_DN=${LDAP_BIND_DN}
      - LDAP_BIND_PW=${LDAP_BIND_PW}
      - LDAP_QUERY_FILTER_USER=${LDAP_QUERY_FILTER_USER}
      - LDAP_QUERY_FILTER_GROUP=${LDAP_QUERY_FILTER_GROUP}
      - LDAP_QUERY_FILTER_ALIAS=${LDAP_QUERY_FILTER_ALIAS}
      - LDAP_QUERY_FILTER_DOMAIN=${LDAP_QUERY_FILTER_DOMAIN}
      - DOVECOT_PASS_FILTER=${DOVECOT_PASS_FILTER}
      - DOVECOT_PASS_ATTRS=${DOVECOT_PASS_ATTRS}
      - DOVECOT_USER_FILTER=${DOVECOT_USER_FILTER}
      - DOVECOT_USER_ATTRS=${DOVECOT_USER_ATTRS}
      - SASLAUTHD_PASSWD=${SASLAUTHD_PASSWD}
      - SASLAUTHD_MECHANISMS=${SASLAUTHD_MECHANISMS}
      - SASLAUTHD_LDAP_SERVER=${LDAP_HOSTNAME}.${DOMAIN}
      - SASLAUTHD_LDAP_SEARCH_BASE=${SASLAUTHD_LDAP_SEARCH_BASE}
      - SASLAUTHD_LDAP_BIND_DN=${SASLAUTHD_LDAP_BIND_DN}
      - SASLAUTHD_LDAP_PASSWORD=${SASLAUTHD_LDAP_PASSWORD}
      - SASLAUTHD_LDAP_FILTER=${SASLAUTHD_LDAP_FILTER}
      - POSTMASTER_ADDRESS=postmaster@${DOMAIN}
      - SSL_TYPE=${SSL_TYPE}
      - PERMIT_DOCKER=${PERMIT_DOCKER}
    networks: 
      default:
        aliases: 
          - ${MAIL_HOSTNAME}.${DOMAIN}
    cap_add:
      - NET_ADMIN
      - SYS_PTRACE

### NEXTCLOUD ######################
  cloud:
    container_name: ${COMPOSE_PROJECT_NAME}_${NEXTCLOUD_CONTAINER_NAME}
    build:
      context: ./services/cloud
      args: 
        - NEXTCLOUD_TAG_VERSION=${NEXTCLOUD_TAG_VERSION}
    volumes: 
      - cloud_data:/var/www/html
    environment: 
      - MYSQL_HOST=${MYSQL_HOSTNAME}.${DOMAIN}
      - MYSQL_DATABASE=${NEXTCLOUD_MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - NEXTCLOUD_ADMIN_USER=${NEXTCLOUD_ADMIN_USER}
      - NEXTCLOUD_ADMIN_PASSWORD=${NEXTCLOUD_ADMIN_PASSWORD}
    networks: 
      default:   
        aliases: 
          - ${NEXTCLOUD_CONTAINER_NAME}.${DOMAIN}
    restart: always

### NGINXPROXY #####################
  nginxproxy:
    container_name: ${COMPOSE_PROJECT_NAME}_${NGINXPROXY_CONTAINER_NAME}
    build:
      context: ./services/nginxproxy
      args:
        - NGINXPROXY_TAG_VERSION=${NGINXPROXY_TAG_VERSION}
    labels:
      com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy: "true"
    volumes: 
      - letsencrypt_certs:/etc/nginx/certs:ro
      - letsencrypt_vhost.d:/etc/nginx/vhost.d
      - letsencrypt_html:/usr/share/nginx/html
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - ${NGINXPROXY_CUSTOM_CONF_PATH}:/etc/nginx/conf.d/my_custom_proxy_settings.conf
    environment: 
      - TZ=${TZ}
      - DEFAULT_HOST=${DOMAIN}
    restart: always
    ports: 
      - 80:80
      - 443:443
    networks: 
      default:

### OMGWTFSSL ##########       
  # omgwtfssl:
  #   image: paulczar/omgwtfssl
  #   restart: "no"
  #   volumes:
  #     - letsencrypt_certs:/certs
  #   environment:
  #     - SSL_SUBJECT=task.nindeco.com
  #     - CA_SUBJECT=admin@nindeco.com
  #     - SSL_KEY=/certs/task.nindeco.com.key
  #     - CA_CERT=/certs/task.nindeco.com-ca.crt
  #     - SSL_CERT=/certs/task.nindeco.com.crt
  #   networks:
  #     default:
### LETSENCRYPT-COMPANION ##########
  letsencrypt:
    container_name: ${COMPOSE_PROJECT_NAME}_${LETSENCRYPT_CONTAINER_NAME}
    build:
      context: ./services/letsencrypt
      args:
        - LETSENCRYPT_TAG_VERSION=${LETSENCRYPT_TAG_VERSION}
    volumes: 
      - letsencrypt_certs:/etc/nginx/certs
      - letsencrypt_vhost.d:/etc/nginx/vhost.d:rw
      - letsencrypt_html:/usr/share/nginx/html
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment: 
      # - DEBUG=true
      - NGINX_PROXY_CONTAINER=nginxproxy
      # - ACME_CA_URI=https://acme-staging.api.letsencrypt.org/directory
    restart: always
    depends_on: 
      - nginxproxy
    networks: 
      default:

### REGISTRY #######################
  registry:
    container_name: ${COMPOSE_PROJECT_NAME}_${LETSENCRYPT_CONTAINER_NAME}
  image: registry:2
  ports:
    - 127.0.0.1:5000:5000
  volumes:
    - ./data:/var/lib/registry
